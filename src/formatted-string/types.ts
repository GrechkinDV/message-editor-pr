export const enum TokenType {
    /** –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç */
    Text = 'text',

    /** –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å */
    Link = 'link',

    /** –≠–º–æ–¥–∂–∏: üòé üëç */
    Emoji = 'emoji',

    /** –¢–µ–∫—Å—Ç–æ–≤—ã–π —ç–º–æ–¥–∂–∏: :) */
    TextEmoji = 'text_emoji',

    /**
     * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∏–∫–µ—Ä —Å –¥—Ä–µ–≤–Ω–∏—Ö –≤—Ä–µ–º—ë–Ω OK:
     * #u123456789s#
     */
    UserSticker = 'user_sticker',

    /** –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ: @user_name */
    Mention = 'mention',

    /** –ö–æ–º–∞–Ω–¥–∞: /command */
    Command = 'command',

    /** –•—ç—à—Ç—ç–≥: #hashtag */
    HashTag = 'hashtag',

    /** –°–∏–º–≤–æ–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown */
    Markdown = 'markdown'
}

export const enum TokenFormat {
    None = 0,

    /** –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç */
    Bold = 1 << 0,

    /** –ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç */
    Italic = 1 << 1,

    /** –ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç */
    Underline = 1 << 2,

    /** –ü–µ—Ä–µ—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç */
    Strike = 1 << 3,

    /** –ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç */
    Monospace = 1 << 4,
}

export type Token = TokenText | TokenLink | TokenEmoji | TokenTextEmoji
    | TokenUserSticker | TokenMention | TokenCommand | TokenHashTag | TokenMarkdown;

export interface TokenBase {
    /** –¢–∏–ø —Ç–æ–∫–µ–Ω–∞ */
    type: TokenType;

    /** –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–æ–∫–µ–Ω–∞ */
    value: string;

    /** –¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ */
    format: TokenFormat;
}

export interface TokenText extends TokenBase {
    type: TokenType.Text;

    /**
     * –ü—Ä–∏–∑–Ω–∞–∫, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Ç–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É —Ç–µ–∫—É—â–µ–≥–æ
     * –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞, —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–µ–Ω–Ω–æ –≤ —Ç–µ–∫—É—â–∏–π, –∞ –Ω–µ –≤
     * –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–∫–µ–Ω
     */
    sticky: boolean;
}

export interface TokenLink extends TokenBase {
    type: TokenType.Link;
    link: string;
}

export interface TokenEmoji extends TokenBase {
    type: TokenType.Emoji;
}

export interface TokenTextEmoji extends TokenBase {
    type: TokenType.TextEmoji;
    /** –≠–º–æ–¥–∂–∏-–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ */
    emoji: string;
}

export interface TokenUserSticker extends TokenBase {
    type: TokenType.UserSticker;
    /** ID —Å—Ç–∏–∫–µ—Ä–∞ */
    stickerId: string;
}

export interface TokenMention extends TokenBase {
    type: TokenType.Mention;
    /** –ó–Ω–∞—á–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è */
    mention: string;
}

export interface TokenCommand extends TokenBase {
    type: TokenType.Command;
    /** –ö–æ–º–∞–Ω–¥–∞ */
    command: string;
}

export interface TokenHashTag extends TokenBase {
    type: TokenType.HashTag;
    /** –ó–Ω–∞—á–µ–Ω–∏–µ —Ö—ç—à—Ç—ç–≥–∞ */
    hashtag: string;
}

export interface TokenMarkdown extends TokenBase {
    type: TokenType.Markdown;
}

/**
 * –û–±—ä–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–æ—Ä–º–∞—Ç–∞
 */
export interface TokenFormatUpdate {
    /** –¢–∏–ø—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å */
    add?: TokenFormat;
    /** –¢–∏–ø—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ —É–¥–∞–ª–∏—Ç—å */
    remove?: TokenFormat;
}
