import { TokenFormat } from '../formatted-string';
import { Token, TokenMarkdown, TokenType } from '../formatted-string/types';
import ParserState from './state';
import { Codes, isDelimiter, isBound } from './utils';

export default function parseMarkdown(state: ParserState): boolean {
    if (state.options.markdown) {
        const { pos } = state;
        // FIXME –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞—è —Å `_italicüòÄ)_,` –ø–æ–∑–∏—Ü–∏—è 10
        if (isStartBound(state)) {
            consumeOpen(state);
        } else {
            consumeClose(state);
        }

        return state.pos !== pos;
    }

    return false;
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç MS-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
 */
export function formatForChar(ch: number): TokenFormat {
    switch (ch) {
        case Codes.Asterisk:
            return TokenFormat.Bold;
        case Codes.Underscore:
            return TokenFormat.Italic;
        case Codes.Tilde:
            return TokenFormat.Strike;
        case Codes.BackTick:
            return TokenFormat.Monospace;
        default:
            return TokenFormat.None;
    }
}

export function peekClosingMarkdown(state: ParserState): boolean {
    if (!state.options.markdown) {
        return false;
    }

    const { pos } = state;
    let format: TokenFormat;
    while ((format = formatForChar(state.peek())) && state.hasFormat(format)) {
        state.pos++;
    }

    const result = pos !== state.pos && isEndBound(state);
    state.pos = pos;
    return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ –ø–æ–∑–∏—Ü–∏–∏, –≥–¥–µ –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å MD-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
function isStartBound(state: ParserState): boolean {
    if (state.pos === 0) {
        // –ù–∞—Ö–æ–¥–∏–º—Å—è –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
        return true;
    }

    if (state.hasPendingText()) {
        const ch = state.peekPrev()
        return isBound(ch)
            || ch === Codes.RoundBracketOpen
            || ch === Codes.SquareBracketOpen
            || ch === Codes.CurlyBracketOpen;
    }

    return false;
}

function isEndBound(state: ParserState): boolean {
    return isDelimiter(state.peek());
}

/**
 * –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≥–ª–æ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function consumeOpen(state: ParserState): void {
    let nextFormat: TokenFormat;

    while (state.hasNext()) {
        nextFormat = formatForChar(state.peek());
        if (nextFormat !== TokenFormat.None && !state.hasFormat(nextFormat)) {
            state.pos++;
            pushOpen(state, mdToken(state, nextFormat));
        } else {
            break;
        }
    }
}

/**
 * –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≥–ª–æ—Ç–∏—Ç—å –∫–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function consumeClose(state: ParserState): void {
    // –ü–æ–≥–ª–æ—â–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ —á—É—Ç—å —Å–ª–æ–∂–Ω–µ–µ: —Ç–æ–∫–µ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º,
    // –µ—Å–ª–∏ –∑–∞ –Ω–∏–º —Å–ª–µ–¥—É–µ—Ç –≥—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤–∞. –ü–æ—ç—Ç–æ–º—É –º—ã —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∫–æ–ø–∏–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ
    // –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã, –∞ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ–º –ª–∏ –∏—Ö –∑–∞–∫—Ä—ã—Ç—å
    const pending: TokenMarkdown[] = [];
    const { pos } = state;
    let nextFormat: TokenFormat;

    while (state.hasNext()) {
        nextFormat = formatForChar(state.peek());
        if (nextFormat !== TokenFormat.None && state.hasFormat(nextFormat)) {
            state.pos++;
            pending.push(mdToken(state, nextFormat));
        } else {
            break;
        }
    }

    if (pending.length && isEndBound(state)) {
        for (let i = 0; i < pending.length; i++) {
            pushClose(state, pending[i]);
        }
    } else if (pos !== state.pos) {
        state.markPending(pos);
    }
}

function mdToken(state: ParserState, format: TokenFormat): TokenMarkdown {
    return {
        type: TokenType.Markdown,
        format,
        value: state.substring(state.pos - 1)
    };
}

/**
 * –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—ç–∫ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π MD-—Ç–æ–∫–µ–Ω
 */
function pushOpen(state: ParserState, token: TokenMarkdown): void {
    state.push(token);
    state.format |= token.format;
    state.formatStack.push(token);
}

/**
 * –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—ç–∫ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π MD-—Ç–æ–∫–µ–Ω
 */
function pushClose(state: ParserState, token: TokenMarkdown): void {
    state.push(token);
    state.format &= ~token.format;

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const openToken = state.formatStack.pop()!;
    // NB: –º–∏–Ω—É—Å 2, –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–æ–∫–µ–Ω.
    // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫–∏–Ω—É—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    let i = state.tokens.length - 2;
    let prevToken: Token;
    while (i >= 0) {
        prevToken = state.tokens[i--];
        prevToken.format |= token.format;
        if (prevToken === openToken) {
            break;
        }
    }
}
