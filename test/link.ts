import { strictEqual as equal, deepStrictEqual as deepEqual } from 'assert';
import _parse from '../src/parser';
import { Token, TokenType } from '../src/formatted-string/types';

function parse(text: string) {
    return _parse(text, { link: true });
}

function types(tokens: Token[]): TokenType[] {
    return tokens.map(t => t.type);
}

function values(tokens: Token[]): string[] {
    return tokens.map(t => t.value);
}

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–æ–∫ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–∫—É—Ä–∂–µ–Ω–∏—è—Ö
 */
function testLink(link: string) {
    let tokens = parse(link);
    deepEqual(types(tokens), [TokenType.Link], `Types: "${link}" only`);
    deepEqual(values(tokens), [link], `Values: "${link}" only`);

    tokens = parse(`foo ${link} bar`);
    deepEqual(types(tokens), [TokenType.Text, TokenType.Link, TokenType.Text], `Types: "${link}" in text`);
    deepEqual(values(tokens), ['foo ', link, ' bar'], `Values: "${link}" in text`);

    // –ì—Ä–∞–Ω–∏—Ü–∞ —Å–ª–æ–≤
    tokens = parse(`.${link}`);
    deepEqual(types(tokens), [TokenType.Text, TokenType.Link], `Types: "${link}" after word bound`);
    deepEqual(values(tokens), ['.', link], `Values: "${link}" after word bound`);

    // –°—Ä–∞–∑—É –∑–∞ —ç–º–æ–¥–∂–∏
    tokens = parse(`${link}üòç`);
    deepEqual(types(tokens), [TokenType.Link, TokenType.Emoji], `Types: "${link}" before emoji`);
    deepEqual(values(tokens), [link, 'üòç'], `Values: "${link}" before emoji`);

    // –ü–µ—Ä–µ–¥ —ç–º–æ–¥–∂–∏
    tokens = parse(`üëåüèª${link}`);
    deepEqual(types(tokens), [TokenType.Emoji, TokenType.Link], `Types: "${link}" after emoji`);
    deepEqual(values(tokens), ['üëåüèª', link], `Values: "${link}" after emoji`);

    // –ü–µ—Ä–µ–¥ keycap-—ç–º–æ–¥–∂–∏
    tokens = parse(`${link}2Ô∏è‚É£`);
    deepEqual(types(tokens), [TokenType.Link, TokenType.Emoji], `Types: "${link}" before keycap emoji`);
    deepEqual(values(tokens), [link, '2Ô∏è‚É£'], `Values: "${link}" before keycap emoji`);

    // –ê–¥—Ä–µ—Å –≤ —Å–∫–æ–±–∫–∞—Ö
    tokens = parse(`(${link})`);
    deepEqual(types(tokens), [TokenType.Text, TokenType.Link, TokenType.Text], `Types: "${link}" in braces`);
    deepEqual(values(tokens), ['(', link, ')'], `Values: "${link}" in braces`);

    // –í–Ω—É—Ç—Ä–∏ —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    tokens = parse(`–∑–∞—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –Ω–∞ —Å–∞–π—Ç ${link} –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å`);
    deepEqual(types(tokens), [TokenType.Text, TokenType.Link, TokenType.Text], `Types: "${link}" in Russian text`);
    deepEqual(values(tokens), ['–∑–∞—Ö–æ–¥–∏—Ç–µ –∫ –Ω–∞–º –Ω–∞ —Å–∞–π—Ç ', link, ' –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å'], `Values: "${link}" in Russian text`);

    // –í–Ω—É—Ç—Ä–∏ HTML (–∫–∞–≤—ã—á–∫–∏)
    tokens = parse(`<img src="${link}">`);
    deepEqual(types(tokens), [TokenType.Text, TokenType.Link, TokenType.Text], `Types: "${link}" in HTML`);
    deepEqual(values(tokens), ['<img src="', link, '">'], `Values: "${link}" in HTML`);

    // –ó–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    tokens = parse(`Have you seen ${link}?`);
    deepEqual(types(tokens), [TokenType.Text, TokenType.Link, TokenType.Text], `Types: "${link}" before questions sign at the end of sentence`);
    deepEqual(values(tokens), ['Have you seen ', link, '?'], `Values: "${link}" before questions sign at the end of sentence`);
}

describe('Link', () => {
    it.only('valid email', () => {
        const emails = [
            'serge.che@gmail.com',
            'some.user@corp.mail.ru',
            'some.user@corp.mail.ru?m=true',
        ];
        // console.log(parse('Have you seen serge.che@gmail.com?'));
        for (const email of emails) {
            testLink(email);
        }
    });
});
